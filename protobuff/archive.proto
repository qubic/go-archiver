syntax = "proto3";

package qubic.archiver.archive.pb;

option go_package = "github.com/qubic/go-archiver/protobuff/";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message TickData {
  uint32 computor_index = 1;
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  bytes var_struct = 5;
  bytes time_lock = 6;
  repeated string transaction_ids = 7;
  repeated int64 contract_fees = 8;
  string signature_hex = 9;
}

message GetTickDataRequest {
  uint32 tick_number = 1;
}

message GetTickDataResponse {
  TickData tick_data = 1;
}

message Transaction {
  string source_id = 1;
  string dest_id = 2;
  int64 amount = 3;
  uint32 tick_number = 4;
  uint32 input_type = 5;
  uint32 input_size = 6;
  string input_hex = 7;
  string signature_hex = 8;
  string tx_id = 9;
}

message TransactionStatus {
  string tx_id = 1;
  bool moneyFlew = 2;
}

message TickTransactionsStatus {
  repeated TransactionStatus transactions = 1;
}

message NextAvailableTick {
  uint32 next_tick_number = 1;
}

message LastProcessedTick {
  uint32 last_processed_tick = 1;
}

message GetTransactionRequest {
  string tx_id = 1;
}

message GetTransactionResponse{
  Transaction transaction = 1;
}

message GetTransactionStatusRequest {
  string tx_id = 1;
}

message GetTransactionStatusResponse {
  TransactionStatus transaction_status = 1;
}

message GetTickTransactionsRequest {
  uint32 tick_number = 1;
}

message GetTickTransactionsResponse {
  repeated Transaction transactions = 1;
}

message GetTickApprovedTransactionsRequest {
  uint32 tick_number = 1;
}

message GetTickApprovedTransactionsResponse {
  repeated Transaction approved_transactions = 1;
}

message QuorumDiff {
  string salted_resource_testing_digest_hex = 1;
  string salted_spectrum_digest_hex = 2;
  string salted_universe_digest_hex = 3;
  string salted_computer_digest_hex = 4;
  string expected_next_tick_tx_digest_hex = 5;
  string signature_hex = 6;
}

message QuorumTickStructure {
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  string prev_resource_testing_digest_hex = 5;
  string prev_spectrum_digest_hex = 6;
  string prev_universe_digest_hex = 7;
  string prev_computer_digest_hex = 8;
  string tx_digest_hex = 9;
}

message SkippedTicksInterval {
  uint32 start_tick = 1;
  uint32 end_tick = 2;
}

message SkippedTicksIntervalList {
  repeated SkippedTicksInterval skipped_ticks = 1;
}

message QuorumTickData {
  QuorumTickStructure quorum_tick_structure = 1;
  map<uint32, QuorumDiff> quorum_diff_per_computor = 2;
}

message GetQuorumTickDataRequest {
  uint32 tick_number = 1;
}

message GetQuorumTickDataResponse {
  QuorumTickData quorum_tick_data = 1;
}

message Computors {
  uint32 epoch = 1;
  repeated string identities = 2;
  string signature_hex = 3;
}

message GetComputorsRequest {
  uint32 epoch = 1;
}

message GetComputorsResponse {
  Computors computors = 1;
}

message TransferTransactionsPerTick {
  uint32 tick_number = 1;
  string identity = 2;
  repeated Transaction transactions = 3;
}

message ProcessedTick {
  uint32 tick_number = 1;
  uint32 epoch = 2;
}

message GetStatusResponse {
  ProcessedTick last_processed_tick = 1;
  map<uint32, uint32> last_processed_ticks_per_epoch = 2;
  repeated SkippedTicksInterval skipped_ticks = 3;
  repeated ProcessedTickIntervalsPerEpoch processed_tick_intervals_per_epoch = 4;
}

message GetHealthCheckResponse {
  bool status = 1;
}

message GetTransferTransactionsPerTickRequest {
  string identity = 1;
  uint32 start_tick = 2;
  uint32 end_tick = 3;
}

message GetTransferTransactionsPerTickResponse {
  repeated TransferTransactionsPerTick transfer_transactions_per_tick = 1;
}

message GetChainHashRequest {
  uint32 tick_number = 1;
}

message GetChainHashResponse {
  string hex_digest = 1;
}

message ProcessedTickInterval {
  uint32 initial_processed_tick = 1;
  uint32 last_processed_tick = 2;
}

message ProcessedTickIntervalsPerEpoch {
  uint32 epoch = 1;
  repeated ProcessedTickInterval intervals = 2;
}

message Tick {
  uint32 computor_index = 1;
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  bytes var_struct = 5; //Will change to return with unmarshalled info
  bytes time_lock = 6;
  repeated string transaction_ids = 7;
  repeated int64 contract_fees = 8;
  string signature_hex = 9;
}

message GetTickResponseV2 {
  Tick tick_Data = 1;
}

message PerTickIdentityTransfers {
  uint32 tick_number = 1;
  string identity = 2;
  repeated TransactionData transactions = 3;
}

message GetIdentityTransfersInTickRangeResponseV2 {
  repeated PerTickIdentityTransfers transactions = 1;
}

//SendMany Transaction
message SendManyTransfer {
  string dest_id = 1;
  int64 amount = 2;
}

message SendManyTransaction {
  string source_id = 1;
  uint32 tick_number = 2;
  repeated SendManyTransfer transfers = 3;
  int64 total_amount = 4;
  string signature_hex = 5;
  string tx_id = 6;
}

//Wrapper around send many transaction and additional data
message SendManyTransactionData {
  SendManyTransaction transaction = 2;
  uint64 timestamp = 3;
  bool money_flew = 4;
}

message GetSendManyTransactionRequestV2 {
  string tx_id = 1;
}

message GetSendManyTransactionResponseV2 {
  SendManyTransaction transaction = 2;
  uint64 timestamp = 3;
  bool money_flew = 4;
}


//Normal Transaction

// Wrapper around transaction and additional data
message TransactionData {
  Transaction transaction = 1;
  uint64 timestamp = 2;
  bool money_flew = 3;
}

//Ticks

// Latest Tick

message GetLatestTickResponseV2 {
  uint32 latest_tick = 1;
}

// Tick Transactions
message GetTickRequestV2 {
  uint32 tick_number = 1;
}
message GetTickTransactionsResponseV2 {
  repeated TransactionData transactions = 1;
}


// Get Transaction
message GetTransactionRequestV2 {
  string tx_id = 1;
}
message GetTransactionResponseV2 {
  Transaction transaction = 1;
  uint64 timestamp = 2;
  bool money_flew = 3;
}


service ArchiveService {

  // Latest Tick
  rpc GetLatestTickV2(google.protobuf.Empty) returns (GetLatestTickResponseV2){
    option (google.api.http) = {
      get: "/v2/tick/latest"
    };
  };

  // General data - To be released at a later date
  /*rpc GetTickV2(GetTickRequestV2) returns (GetTickResponseV2) {
    option (google.api.http) = {
      get: "/v2/tick/{tick_number}"
    };
  };*/

  // Quorum data
  rpc GetTickQuorumDataV2(GetTickRequestV2) returns (GetQuorumTickDataResponse) { // Uses V1 response
    option (google.api.http) = {
      get: "/v2/tick/{tick_number}/quorum-data"
    };
  };

  // Chain hash
  rpc GetTickChainHashV2(GetTickRequestV2) returns (GetChainHashResponse) { // Uses V1 response
    option (google.api.http) = {
      get: "/v2/tick/{tick_number}/hash"
    };
  }

  // Store hash
  rpc GetTickStoreHashV2(GetTickRequestV2) returns (GetChainHashResponse) { // Uses V1 response
    option (google.api.http) = {
      get: "/v2/tick/{tick_number}/store-hash"
    };
  }


  // Tick transactions
  rpc GetAllTickTransactionsV2(GetTickRequestV2) returns (GetTickTransactionsResponseV2){
    option (google.api.http) = {
      get: "/v2/tick/{tick_number}/transactions"
    };
  };
  rpc GetTransferTickTransactionsV2(GetTickRequestV2) returns (GetTickTransactionsResponseV2){
    option (google.api.http) = {
      get: "/v2/tick/{tick_number}/transactions/transfers"
    };
  };
  rpc GetApprovedTickTransactionsV2(GetTickRequestV2) returns (GetTickTransactionsResponseV2){
    option (google.api.http) = {
      get: "/v2/tick/{tick_number}/transactions/transfers/approved"
    };
  };

  //Transaction

  //Normal
  rpc GetTransactionV2(GetTransactionRequestV2) returns (GetTransactionResponseV2) {
    option (google.api.http) = {
      get: "/v2/transaction/{tx_id}"
    };
  };

  //SendMany
  rpc GetSendManyTransactionV2(GetSendManyTransactionRequestV2) returns (GetSendManyTransactionResponseV2) {
    option (google.api.http) = {
      get: "/v2/transaction/{tx_id}/sendmany"
    };
  };

  //Identity
  rpc GetIdentityTransfersInTickRangeV2(GetTransferTransactionsPerTickRequest) returns (GetIdentityTransfersInTickRangeResponseV2) { // Uses V1 request
    option (google.api.http) = {
      get: "/v2/identity/{identity}/transfers"
    };
  };

  //V1 Endpoints
  rpc GetTickData(GetTickDataRequest) returns (GetTickDataResponse){
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/tick-data"
    };
  };
  rpc GetQuorumTickData(GetQuorumTickDataRequest) returns (GetQuorumTickDataResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/quorum-tick-data"
    };
  };
  rpc GetTickTransactions(GetTickTransactionsRequest) returns (GetTickTransactionsResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/transactions"
    };
  };
  rpc GetTickTransferTransactions(GetTickTransactionsRequest) returns (GetTickTransactionsResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/transfer-transactions"
    };
  };
  rpc GetTickApprovedTransactions (GetTickApprovedTransactionsRequest) returns (GetTickApprovedTransactionsResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/approved-transactions"
    };
  }
  rpc GetChainHash(GetChainHashRequest) returns (GetChainHashResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/chain-hash"
    };
  };

  rpc GetStoreHash(GetChainHashRequest) returns (GetChainHashResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/store-hash"
    };
  };

  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
      get: "/v1/transactions/{tx_id}"
    };
  };

  rpc GetTransactionStatus (GetTransactionStatusRequest) returns (GetTransactionStatusResponse) {
    option (google.api.http) = {
      get: "/v1/tx-status/{tx_id}"
    };
  }

  rpc GetTransferTransactionsPerTick(GetTransferTransactionsPerTickRequest) returns (GetTransferTransactionsPerTickResponse) {
    option (google.api.http) = {
      get: "/v1/identities/{identity}/transfer-transactions"
    };
  };

  rpc GetComputors(GetComputorsRequest) returns (GetComputorsResponse) {
    option (google.api.http) = {
      get: "/v1/epochs/{epoch}/computors"
    };
  };

  rpc GetStatus(google.protobuf.Empty) returns (GetStatusResponse) {
    option (google.api.http) = {
      get: "/v1/status"
    };
  };

  rpc GetLatestTick(google.protobuf.Empty) returns (GetLatestTickResponseV2) {
    option (google.api.http) = {
      get: "/v1/latestTick"
    };
  };


  rpc GetHealthCheck(google.protobuf.Empty) returns (GetHealthCheckResponse){
    option (google.api.http) = {
      get: "/v1/healthcheck"
    };
  };
}