syntax = "proto3";

package qubic.archiver.archive.pb;

option go_package = "github.com/qubic/go-archiver/protobuff/";

message TickData {
  uint32 computor_index = 1;
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  bytes var_struct = 5;
  bytes time_lock = 6;
  repeated string transaction_ids = 7;
  repeated int64 contract_fees = 8;
  string signature_hex = 9;
}

message GetTickDataRequest {
  uint32 tick_number = 1;
}

message GetTickDataResponse {
  TickData tick_data = 1;
}

message Transaction {
  string source_id = 1;
  string dest_id = 2;
  int64 amount = 3;
  uint32 tick_number = 4;
  uint32 input_type = 5;
  uint32 input_size = 6;
  string input_hex = 7;
  string signature_hex = 8;
  string tx_id = 9;
}

message GetTransactionRequest {
  string tx_id = 1;
}

message GetTransactionResponse{
  Transaction transaction = 1;
}

message GetTickTransactionsRequest {
  uint32 tick_number = 1;
}

message GetTickTransactionsResponse {
  repeated Transaction transactions = 1;
}

message QuorumDiff {
  string salted_resource_testing_digest_hex = 1;
  string salted_spectrum_digest_hex = 2;
  string salted_universe_digest_hex = 3;
  string salted_computer_digest_hex = 4;
  string expected_next_tick_tx_digest_hex = 5;
  string signature_hex = 6;
}

message QuorumTickStructure {
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  string prev_resource_testing_digest_hex = 5;
  string prev_spectrum_digest_hex = 6;
  string prev_universe_digest_hex = 7;
  string prev_computer_digest_hex = 8;
  string tx_digest_hex = 9;
}

message SkippedTicksInterval {
  uint32 start_tick = 1;
  uint32 end_tick = 2;
}

message SkippedTicksIntervalList {
  repeated SkippedTicksInterval skipped_ticks = 1;
}

message QuorumTickData {
  QuorumTickStructure quorum_tick_structure = 1;
  map<uint32, QuorumDiff> quorum_diff_per_computor = 2;
}

message GetQuorumTickDataRequest {
  uint32 tick_number = 1;
}

message GetQuorumTickDataResponse {
  QuorumTickData quorum_tick_data = 1;
}

message Computors {
  uint32 epoch = 1;
  repeated string identities = 2;
  string signature_hex = 3;
}

message GetComputorsRequest {
  uint32 epoch = 1;
}

message GetComputorsResponse {
  Computors computors = 1;
}

message IdentityInfo {
  string id = 1;
  uint32 tick_number = 2;
  int64 balance = 3;
  int64 incoming_amount = 4;
  int64 outgoing_amount = 5;
  uint32 nr_incoming_transfers = 6;
  uint32 nr_outgoing_transfers = 7;
  uint32 latest_incoming_transfer_tick = 8;
  uint32 latest_outgoing_transfer_tick = 9;
  repeated string siblings_hex = 10;
}

message TransferTransactionsPerTick {
  uint32 tick_number = 1;
  string identity = 2;
  repeated Transaction transactions = 3;
}

message GetIdentityInfoRequest {
  string identity = 1;
}

message GetIdentityInfoResponse {
  IdentityInfo identity_info = 1;
}

message GetLastProcessedTickRequest {}
message GetLastProcessedTickResponse{
  uint32 last_processed_tick = 1;
  map<uint32, uint64> last_processed_ticks_per_epoch = 2;
}

message SendRawTransactionRequest {
  string signed_tx = 1;
}

message SendRawTransactionResponse {
  string message = 1;
}

message GetSkippedTicksRequest {}

message GetSkippedTicksResponse {
  repeated SkippedTicksInterval skipped_ticks = 1;
}

message GetTransferTransactionsPerTickRequest {
  string identity = 1;
  uint32 start_tick = 2;
  uint32 end_tick = 3;
}

message GetTransferTransactionsPerTickResponse {
  repeated TransferTransactionsPerTick transfer_transactions_per_tick = 1;
}

message GetQChainHashRequest {
  uint32 tick_number = 1;
}

message GetQChainHashResponse {
  string hex_digest = 1;
}

service ArchiveService {
  rpc GetTickData(GetTickDataRequest) returns (GetTickDataResponse);
  rpc GetTickTransactions(GetTickTransactionsRequest) returns (GetTickTransactionsResponse);
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
  rpc GetQuorumTickData(GetQuorumTickDataRequest) returns (GetQuorumTickDataResponse);
  rpc GetComputors(GetComputorsRequest) returns (GetComputorsResponse);
  rpc GetIdentityInfo(GetIdentityInfoRequest) returns (GetIdentityInfoResponse);
  rpc GetLastProcessedTick(GetLastProcessedTickRequest) returns (GetLastProcessedTickResponse);
  rpc SendRawTransaction(SendRawTransactionRequest) returns (SendRawTransactionResponse);
  rpc GetSkippedTicks(GetSkippedTicksRequest) returns (GetSkippedTicksResponse);
  rpc GetTransferTransactionsPerTick(GetTransferTransactionsPerTickRequest) returns (GetTransferTransactionsPerTickResponse);
  rpc GetQChainHash(GetQChainHashRequest) returns (GetQChainHashResponse);
}